name: Build

on:
  push:
    branches:
      - 'automation'
      - 'automation-testing'
  workflow_dispatch:
    inputs:
      ref:
        description: 'Branch, Tag or Commit to build'
        required: true
        default: 'master'

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        runner: [ 'windows-2019', 'ubuntu-20.04' ]
        type: [ 'shared', 'static' ]
        include:
          - runner: 'windows-2019'
            id: 'windows-2019'
            runner_os: 'Windows 2019'
            cmake_generator: 'Visual Studio 16 2019'
            cmake_architecture: 'x64'
#          - runner: 'windows-2022'
#            id: 'windows-2022'
#            runner_os: 'Windows 2022'
#            cmake_generator: 'Visual Studio 17 2022'
#            cmake_architecture: 'x64'
          - runner: 'ubuntu-20.04'
            id: 'linux'
            runner_os: 'Linux'
            cmake_generator: 'Ninja'
            CC: 'clang-14'
            CXX: 'clang++-14'
    runs-on: ${{ matrix.runner }}
    name: "Build (${{ matrix.runner_os }}, ${{ matrix.type }})"
    env:
      CMAKE_GENERATOR: ${{ matrix.cmake_generator }}
      CMAKE_ARCHITECTURE: ${{ matrix.cmake_architecture }}
      CC: ${{ matrix.CC }}
      CXX: ${{ matrix.CXX }}

    steps:
    - name: "Preprocess Inputs"
      id: input
      shell: bash
      run: |        
        if [ "${{ github.event.inputs.ref }}" = "" ]; then
          echo "Input 'ref' contains invalid value '${{ github.event.inputs.ref }}'."
          echo "::set-output name=ref::master"
        else
          if ! git show-ref | grep "${{ github.event.inputs.ref }}" > /dev/null; then
            echo "Input 'ref' contains unknown ref '${{ github.event.inputs.ref }}'."
            echo "::set-output name=ref::master"
          else
            echo "::set-output name=ref::${{ github.event.inputs.ref }}"
          fi
        fi

    - name: "Checkout"
      uses: actions/checkout@v2
      with:
        ref: "${{ steps.input.outputs.ref }}"
        submodules: recursive
        fetch-depth: 0

    - name: "Gather Information"
      id: data
      shell: bash
      run: |
        # Detect Major.Minor.Patch version
        VERSION=( $(git describe --always --tags --match "v[0-9]*.[0-9]*.[0-9]*" --abbrev=8 ${{ steps.input.outputs.ref }} | sed -E 's/v([0-9]*)\.([0-9]*)\.([0-9]*)(.*)/\1 \2 \3/gi') )
        COMMIT=$(git rev-parse --short=8 HEAD)
        echo "SVT-AV1 v${VERSION[0]}.${VERSION[1]}.${VERSION[2]}.${VERSION[3]}-${COMMIT}"
        echo "::set-output name=major::${VERSION[0]}"
        echo "::set-output name=minor::${VERSION[1]}"
        echo "::set-output name=patch::${VERSION[2]}"
        echo "::set-output name=commit::${COMMIT}"

        # Build Type
        if [ "${{ matrix.type }}" == "static" ]; then
          echo "::set-output name=type::-DBUILD_SHARED_LIBS=OFF"
        else
          echo "::set-output name=type::-DBUILD_SHARED_LIBS=ON"
        fi

    - name: "Install Dependencies (Linux)"
      if: ${{ startsWith(matrix.runner, 'ubuntu-') }}
      id: deps-linux
      shell: bash
      run: |
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        sudo apt-add-repository "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-14 main"
        #sudo apt-add-repository "deb-src http://apt.llvm.org/focal/ llvm-toolchain-focal-14 main"
        sudo apt-get update
        sudo apt-get install clang-14 cmake yasm ninja-build

    - name: "Install Dependencies (Windows)"
      if: ${{ startsWith(matrix.runner, 'windows-') }}
      id: deps-windows
      shell: bash
      run: |
        curl -L -o "yasm.exe" "http://www.tortall.net/projects/yasm/releases/yasm-1.3.0-win64.exe"

    - name: "Configure"
      shell: bash
      run: |
        export PATH="${PATH}:${{ github.workspace }}"
        cmake -H. -B./build/temp \
          ${{ steps.deps-linux.outputs.yasm }} \
          ${{ steps.deps-windows.outputs.yasm }} \
          ${{ steps.data.outputs.type }} \
          -DCMAKE_BUILD_TYPE=RelWithDebInfo \
          -DCMAKE_INSTALL_PREFIX=./build/distrib \
          -DBUILD_TESTING=OFF \
          -DCOVERAGE=OFF \
          -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
          -DSVT_AV1_LTO=ON

    - name: "Build"
      shell: bash
      run: |
        cmake --build "build/temp" --config RelWithDebInfo --target install

    - name: "Artifacts"
      uses: actions/upload-artifact@v1
      with:
        name: ${{ matrix.id }}-${{ matrix.type}}-${{ steps.data.outputs.major }}.${{ steps.data.outputs.minor }}.${{ steps.data.outputs.patch }}-${{ steps.data.outputs.commit }}
        path: build/distrib
